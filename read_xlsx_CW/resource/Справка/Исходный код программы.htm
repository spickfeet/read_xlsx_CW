<!DOCTYPE html>
<html lang="en">
<head>
    <meta>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Исходный код программы</title>
    <style>
        body {
            font-family: Consolas, monospace;
            line-height: 1.5;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        pre {
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .code-block {
            margin-bottom: 30px;
        }
        .keyword {
            color: #0000ff;
        }
        .comment {
            color: #008000;
        }
        .string {
            color: #a31515;
        }
        .type {
            color: #2b91af;
        }
    </style>
</head>
<body>
    <h1>Исходный код программы</h1>

    <div class="code-block">
        <pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    public class StateMachine
    {
        public bool IsStopped {  get; set; }
        public IState State { get; set; }
        public List&lt;string&gt; Tokens { get; set; }
        public int CurrentTokenIndex { get; set; }
        public List&lt;ErrorData&gt; ErrorsData {  get; set; }
        public int CountDel { get; set; }
        public int Line {  get; set; }
        public List&lt;int&gt; Offsets { get; set; }
        private Dictionary&lt;int, int&gt; _offsetsByIndexDict;
        public StateMachine()
        {
            _offsetsByIndexDict = new();
            Offsets = new();
            ErrorsData = new();
            Tokens = new List&lt;string&gt;();
            State = new StartState();
        }
        public int GetIndexOfCurrentToken()
        {
            int index = 0;
            for (int i = 0; i &lt; CurrentTokenIndex; i++) 
            {
                index += Tokens[i].Length;
            }
            return index;
        } 

        public string DelNonValidSymbols(string text)
        {
            _offsetsByIndexDict = new Dictionary&lt;int, int&gt;();
            int line = 1;
            int offset = 0;
            string nonValidSymbols = "!@#$%^&amp;*\"№:?";
            StringBuilder nonValidText = new StringBuilder();
            for (int i = 0; i &lt; text.Length; i++)
            {
                if (nonValidSymbols.Contains(text[i]))
                {
                    offset++;
                    if (i + 1 != text.Length &amp;&amp; nonValidSymbols.Contains(text[i + 1]))
                    {
                        nonValidText.Append(text[i]);
                    }
                    else
                    {
                        nonValidText.Append(text[i]);
                        ErrorsData.Add(new(line, i + 1 - nonValidText.Length, $"\"{nonValidText}\" не является ожидаемым. (Отбрасывается)"));

                        _offsetsByIndexDict.Add(i - offset, offset);
                        nonValidText.Clear();
                    }
                    if(text[i] == '\n')
                    {
                        line++;
                    }
                }
            }
            return Regex.Replace(text, $"[{nonValidSymbols}]", "");
        }

        public void Start(string text)
        {
            CountDel = 0;
            CurrentTokenIndex = 0;
            Tokens.Clear();
            IsStopped = false;
            ErrorsData.Clear();
            Line = 1;
            //-----------------------------Удаление некорректных символов-----------------------------
            //text = DelNonValidSymbols(text);
            //----------------------------------------------------------------------------------------

            //string pattern = @"Console|ReadLine|((?!(ReadLine|Console))[^\s\.();])+|\.|\(|\)|;|\s";
            string pattern = @"Console|ReadLine|((?!(ReadLine|Console))[^\.();])+|\.|\(|\)|;";
            Regex regex = new Regex(pattern);
            MatchCollection matches = regex.Matches(text);
            
            for (int i = 0; i &lt; matches.Count; i++)
            {
                Tokens.Add(matches[i].Value);

                //-----------------------------Удаление некорректных символов-----------------------------

                //CurrentTokenIndex++;
                Offsets.Add(0);
                //foreach (int kay in _offsetsByIndexDict.Keys) 
                //{
                //    if (GetIndexOfCurrentToken() &lt; kay)
                //    {
                //        break;
                //    }
                //    else
                //    {
                //        Offsets[i] = _offsetsByIndexDict[kay];
                //    }
                //}

                //--------------------------------------------------------------------------------------------------------------------
            }
            Line = 1;
            CurrentTokenIndex = 0;
            for (; IsStopped == false; CurrentTokenIndex++) 
            {
                State.Enter(this);
                if (CurrentTokenIndex &lt; Tokens .Count &amp;&amp; Tokens[CurrentTokenIndex] == "\n")
                {
                    Line++;
                }
            }
        }
    }
}</code></pre>
    </div>

    <div class="code-block">
        <pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace CW_read_xlsx.State
{
    public class StartState : IState
    {
        public void Enter(StateMachine sm)
        {
            if(sm.CurrentTokenIndex &gt;= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                sm.CountDel = 0;
                sm.State = new ConsoleState();
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else 
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i &lt; tokens.Length; i++)
            {
                if (sm.CountDel &gt; tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex &lt; sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $" Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex &gt;= sm.Tokens.Count)
            {
                sm.IsStopped = true;
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ".")
            {
                string[] tokens = { "Console" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new ConsoleState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "ReadLine")
            {
                string[] tokens = { "Console", "." };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new PointState();
                sm.State.Enter(sm);
                return;
            }
            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex &lt; sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    class ReadLineState : IState
    {
        public void Enter(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "(")
            {
                sm.CountDel = 0;
                sm.State = new OpenBracketState();
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sm.CountDel > tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), sm.CurrentTokenIndex < sm.Tokens.Count ? $"Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\"" :
                         $"В конце ожидается \"{tokens[i]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                string[] tokens = { "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                string[] tokens = { "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ")")
            {
                string[] tokens = { "(" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new OpenBracketState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ";")
            {
                string[] tokens = { "(", ")" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new CloseBracketState();
                sm.State.Enter(sm);
                return;
            }
            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}

</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    class PointState : IState
    {
        public void Enter(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "ReadLine")
            {
                sm.CountDel = 0;
                sm.State = new ReadLineState();
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sm.CountDel > tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), sm.CurrentTokenIndex < sm.Tokens.Count ? $"Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\"" :
                         $"В конце ожидается \"{tokens[i]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                string[] tokens = { "ReadLine", "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                string[] tokens = { "ReadLine", "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "(")
            {
                string[] tokens = { "ReadLine" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new ReadLineState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ")")
            {
                string[] tokens = { "ReadLine", "(" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new OpenBracketState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ";")
            {
                string[] tokens = { "ReadLine", "(", ")" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new CloseBracketState();
                sm.State.Enter(sm);
                return;
            }
            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}

</code></pre>
    </div>
<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    class OpenBracketState : IState
    {
        public void Enter(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ")")
            {
                sm.CountDel = 0;
                sm.State = new CloseBracketState();
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sm.CountDel > tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), sm.CurrentTokenIndex < sm.Tokens.Count ? $"Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\"" :
                         $"В конце ожидается \"{tokens[i]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                string[] tokens = { ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                string[] tokens = { ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ";")
            {
                string[] tokens = { ")" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new CloseBracketState();
                sm.State.Enter(sm);
                return;
            }
            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}

</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    public interface IState
    {
        void Enter(StateMachine sm);
    }
}

</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    public class ErrorData
    {
        public int Line { get; set; }
        public int GlobalIndex { get; set; }
        public string Text { get; set; }
        public ErrorData(int line, int globalIndex, string text) 
        {
            Line = line;
            GlobalIndex = globalIndex;
            Text = text;
        }

    }
}

</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    class ConsoleState : IState
    {
        public void Enter(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ".")
            {
                sm.State = new PointState();
                sm.CountDel = 0;
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sm.CountDel > tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), sm.CurrentTokenIndex < sm.Tokens.Count ? $"Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\"" :
                         $"В конце ожидается \"{tokens[i]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                string[] tokens = { ".", "ReadLine", "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                string[] tokens = {".", "ReadLine", "(", ")", ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "ReadLine")
            {
                string[] tokens = { "." };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new PointState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "(")
            {
                string[] tokens = { ".", "ReadLine" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new ReadLineState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ")")
            {
                string[] tokens = { ".", "ReadLine", "("};
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new OpenBracketState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ";")
            {
                string[] tokens = { ".", "ReadLine", "(", ")" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new CloseBracketState();
                sm.State.Enter(sm);
                return;
            }
            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}

</code></pre>
    </div>

<div class="code-block">
        <pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW_read_xlsx.State
{
    class CloseBracketState : IState
    {
        public void Enter(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                ErrorNeutralizer(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ";")
            {
                sm.CountDel = 0;
                sm.State = new StartState();
            }
            else if (string.IsNullOrWhiteSpace(sm.Tokens[sm.CurrentTokenIndex]))
            {
                return;
            }
            else
            {
                ErrorNeutralizer(sm);
            }
        }
        private void NeutralizerAddOrChangeError(StateMachine sm, string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sm.CountDel > tokens.Length)
                {
                    sm.CountDel = tokens.Length;
                }
                if (sm.CountDel != 0)
                {
                    sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text = sm.ErrorsData[sm.ErrorsData.Count - sm.CountDel].Text.Replace("Отбрасывается", $"Заменяется на \"{tokens[i]}\"");
                    sm.CountDel--;
                }
                else
                {
                    sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), sm.CurrentTokenIndex < sm.Tokens.Count ? $"Ожидается \"{tokens[i]}\" перед \"{sm.Tokens[sm.CurrentTokenIndex]}\"" :
                         $"В конце ожидается \"{tokens[i]}\""));
                }
            }
        }
        private void ErrorNeutralizer(StateMachine sm)
        {
            if (sm.CurrentTokenIndex >= sm.Tokens.Count)
            {
                string[] tokens = { ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "Console")
            {
                string[] tokens = { ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == ".")
            {
                string[] tokens = { ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }
            if (sm.Tokens[sm.CurrentTokenIndex] == "ReadLine")
            {
                string[] tokens = { ";" };
                NeutralizerAddOrChangeError(sm, tokens);
                sm.State = new StartState();
                sm.State.Enter(sm);
                return;
            }

            sm.ErrorsData.Add(new(sm.Line, sm.GetIndexOfCurrentToken() + (sm.CurrentTokenIndex < sm.Tokens.Count ? sm.Offsets[sm.CurrentTokenIndex] : 0), $"\"{sm.Tokens[sm.CurrentTokenIndex]}\" не является ожидаемым. (Отбрасывается)"));
            sm.CountDel++;
        }
    }
}

</code></pre>
    </div>

</body>
</html>